{"version":3,"sources":["helpers.js","app.js","CalendarController.js","GmailController.js","QuoteController.js","RssController.js","SizerController.js","WeatherController.js","CardBox.js","EventIcon.js","EventsService.js","FeedService.js","GeoService.js","GmailService.js","WeatherService.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxtJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACrjIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC1LA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AC5CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACdA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/**\n * @param {Scope} scope\n * @param {Function} callback\n */\nangular.safeApply = function (scope, callback) {\n    scope[(scope.$$phase || scope.$root.$$phase) ? '$eval' : '$apply'](callback || function() {});\n};\n\nangular.isMobile = (function(a)\n{\n    return /((iP([oa]+d|(hone)))|Android|WebOS|BlackBerry|windows (ce|phone))/i.test(a);\n})(navigator.userAgent||navigator.vendor||window.opera);\n\nangular.isOnline = function isOnline()\n{\n    var isOnline = (window.navigator && window.navigator.onLine);\n\n    return isOnline;\n};\n\nangular.storagePrefix = function (path) {\n    var namespace = [\n        'ymag', window['gid']\n    ];\n\n    if (path && path.length) {\n        namespace.push(path);\n    }\n\n    return namespace.join('.');\n};","var app = angular.module('app', ['ngSanitize', 'LocalStorageModule']);\n\napp.config(['localStorageServiceProvider', '$httpProvider', function (localStorageServiceProvider, $httpProvider) {\n    var namespace = angular.storagePrefix();\n    $httpProvider.defaults.headers.common.Authorization = 'Bearer ' + window['api_token'];\n    localStorageServiceProvider.setPrefix(namespace);\n    localStorageServiceProvider.setStorageCookie(1, '/');\n}]);\n\napp.run(['$rootScope', function ($rootScope) {\n    window.onclick = function (event) {\n        if (0 == $(event.target).closest('div.card-actions.dropdown.open').length\n            && 0 == $(event.target).closest('#cities-list').length) {\n            $rootScope.$broadcast('cardbox.close');\n        }\n    };\n}]);\n\napp.REWRITE_BASE = '/';\nif (location.host == 'dev-your-morning.rainbowriders.dk') {\n    app.REWRITE_BASE = '/public/';\n}\n\napp.API_PREFIX = app.REWRITE_BASE + 'api/v1';\n","app.controller('CalendarController', [\n    '$scope', '$rootScope', 'EventsService', 'localStorageService',\n    function ($scope, $rootScope, EventsService, localStorageService) {\n\n        $scope.calendars = [];\n        $scope.events = [];\n        $scope.hasEvents = false;\n        $scope.calendarEvents = [];\n        \n        $scope.init = function init (calendars) {\n\n            $scope.calendars = calendars;\n            setDefaultCalendar();\n\n        };\n\n        $scope.savePreferences = function savePreferences (cb) {\n\n            var temp = [];\n\n            for(var i = 0; i < $scope.calendars.length; i++) {\n                if($scope.calendars[i].selected == true) {\n                    temp.push($scope.calendars[i]);\n                }\n            }\n\n            localStorageService.set(\n                'cal',\n                JSON.stringify(angular.copy(temp)));\n\n            fetchEvents();\n\n            if(cb) {\n                cb();\n            }\n        };\n\n        $scope.cancel = function cancel (callback) {\n            resetCalendarsStatus();\n            setDefaultCalendarsStatus(getSavedCalendars());\n            if(callback) {\n                callback();\n            }\n        };\n\n        $scope.select = function (calendar) {\n            checkUncheckCalendar(calendar);\n        };\n\n        $scope.$on('cardbox.close', function () {\n            resetCalendarsStatus();\n            setDefaultCalendarsStatus(getSavedCalendars());\n        });\n\n        $scope.$watchCollection('calendarEvents', function () {\n            $scope.events = [];\n            for( var i = 0; i < $scope.calendarEvents.length; i++) {\n\n                for (var a in $scope.calendarEvents[i]) {\n                    $scope.events.push($scope.calendarEvents[i][a]);\n                }\n            }\n            if($scope.events.length > 0) {\n                $scope.hasEvents = true;\n            }\n            $scope.events.sort(function (a, b) {\n                a = new Date(a.date);\n                b = new Date(b.date);\n                return a < b ? -1 : a > b ? 1 : 0;\n            });\n        });\n\n        function setDefaultCalendar() {\n            var saved = getSavedCalendars();\n\n            if(!saved || saved == null) {\n                $scope.calendars[0].selected = true;\n                var temp = [];\n                temp.push($scope.calendars[0]);\n                localStorageService.set(\n                    'cal',\n                    JSON.stringify(angular.copy(temp)));\n            } else {\n                setDefaultCalendarsStatus(saved);\n            }\n\n            fetchEvents();\n        }\n\n        function checkUncheckCalendar(calendar) {\n\n            for(var i =0; i < $scope.calendars.length; i++) {\n\n                if($scope.calendars[i].id == calendar.id) {\n\n                    // First time loaded\n                    if(!$scope.calendars[i].selected || $scope.calendars[i].selected == 'undefined') {\n                        $scope.calendars[i].selected = true;\n                    } else {  // if user make changed\n                        $scope.calendars[i].selected = !$scope.calendars[i].selected;\n                    }\n                }\n            }\n        }\n\n        function getSavedCalendars() {\n            return JSON.parse(localStorageService.get('cal'));\n        }\n\n        function setDefaultCalendarsStatus(calendars) {\n            for(var i =0; i < calendars.length; i++) {\n                setDefaultCalendarStatus(calendars[i]);\n            }\n        }\n\n        function setDefaultCalendarStatus(calendar) {\n            for( var i = 0; i < $scope.calendars.length; i++) {\n                if(calendar.id == $scope.calendars[i].id) {\n                    $scope.calendars[i].selected = calendar.selected || false;\n                    break;\n                }\n            }\n        }\n\n        function resetCalendarsStatus() {\n            for (var i = 0; i <$scope.calendars.length; i++) {\n                $scope.calendars[i].selected = false;\n            }\n        }\n\n        function fetchEvents () {\n            $scope.calendarEvents = [];\n            $scope.hasEvents = false;\n            for (var i = 0; i < $scope.calendars.length; i++) {\n                if($scope.calendars[i].selected == true) {\n                    EventsService.events($scope.calendars[i].id)\n                        .then(function (res) {\n                            $scope.calendarEvents.push(res);\n                        });\n                }\n            }\n        }\n    }]);","app.controller('GmailController', ['$scope', 'GmailService', '$sce', 'localStorageService',\n    function ($scope, GmailService, $sce, localStorageService) {\n        $scope.searchMode = true;\n\n        $scope.message = null;\n\n        $scope.loading = false;\n\n        $scope.nextPageToken = null;\n\n        var emptyFilter = function () {\n            return {\n                'from': '',\n                'to': '',\n                'subject': '',\n                'includeSpamTrash': false\n            };\n        };\n\n        var savedFilter;\n        if (!(savedFilter = localStorageService.get('g_fltr'))) {\n            savedFilter = JSON.stringify(emptyFilter());\n            localStorageService.set('g_fltr', savedFilter);\n        }\n\n        $scope.filter = JSON.parse(savedFilter);\n\n        $scope.messages = [];\n\n        $scope.query = buildQuery();\n\n        function buildQuery() {\n            $scope.query = '';\n\n            var q = [];\n            angular.forEach(['from', 'to', 'subject'], function (field, index, values) {\n                var value = $scope.filter[field];\n\n                if (value.length) {\n                    q.push(field + ': (' + value + ')');\n                }\n            });\n\n            $scope.query = q.join(\" \").trim();\n\n            return $scope.query;\n        }\n\n        $scope.savePreferences = function (cb) {\n            $scope.messages = [];\n            $scope.nextPageToken = null;\n\n            return $scope.fetchMessages(cb);\n        };\n\n        $scope.next = $scope.fetchMessages = function (cb) {\n            if ($scope.loading) return false;\n\n            $scope.loading = true;\n\n            // save filter\n            localStorageService.set('g_fltr', savedFilter = JSON.stringify($scope.filter));\n\n            var args = {\n                'includeSpamTrash': !!$scope.filter.includeSpamTrash,\n                'q': buildQuery(),\n                'nextPageToken': $scope.nextPageToken\n            };\n\n            return GmailService.fetchMessages(args)\n                .then(function (messages) {\n                    console.log(messages);\n                    if (cb) {\n                        cb();\n                    }\n\n                    // restore listing view\n                    angular.safeApply($scope, function ($scope) {\n                        for (var i in messages.messages) {\n                            $scope.messages.push(messages.messages[i]);\n                        }\n                        $scope.nextPageToken = messages.nextPage;\n\n                        $scope.loading = false;\n                    });\n                })\n                .catch(function () {\n                    $scope.loading = false;\n                });\n        };\n\n        // fetch messages on page ready\n        $scope.fetchMessages();\n\n        $scope.isUnRead = function (message) {\n            return message.hasOwnProperty('labels')\n                && (-1 < message.labels.indexOf('UNREAD'));\n        };\n\n        $scope.fullMessageUrl = function (messageId) {\n            return $sce.trustAsResourceUrl(app.API_PREFIX + '/gmail/messages/' + messageId + '/body');\n        };\n\n        $scope.toggleSearchMode = function (flag, callback) {\n            if (!flag) {\n                $scope.filter = JSON.parse(savedFilter);\n            }\n\n            // $scope.searchMode = !!flag;\n\n            if (callback) {\n                callback();\n            }\n        };\n\n        $scope.backToList = function () {\n            $scope.message = null;\n        };\n\n        $scope.readMessage = function (messageId) {\n            $scope.loading = true;\n\n            GmailService.get(messageId)\n                .then(function (message) {\n                    angular.safeApply($scope, function ($scope) {\n                        $scope.message = message;\n\n                        $scope.loading = false;\n\n                        var currentMessage = $scope.messages.filter(function (message) {\n                            return message.id == messageId;\n                        })[0];\n\n                        $scope.messages.map(function (message) {\n                            if (message.id == messageId && $scope.isUnRead(message)) {\n                                var index = message.labels.indexOf('UNREAD');\n\n                                message.labels.splice(index, 1);\n\n                                GmailService.markAsRead(messageId);\n                            }\n\n                            return message;\n                        });\n                    });\n                })\n                .catch(function () {\n                    $scope.loading = false;\n                });\n        }\n    }]);","app.controller('QuoteController', ['$scope', '$http', function ($scope, $http) {\n    $scope.quote = {\n        id: null,\n        quote: '',\n        author: ''\n    };\n\n    $scope.loading = false;\n\n    /**\n     * Fetch random quote\n     */\n    $scope.fetchRandom = function () {\n        if ($scope.loading) return false;\n\n        $scope.loading = true;\n        $http.get(app.API_PREFIX + '/quotes/random').then(function (response) {\n            $scope.quote = response.data;\n            $scope.loading = false;\n        });\n    }\n}]);","app.controller('RssController', [\n    '$scope', '$timeout', 'localStorageService', 'FeedService', '$q',\n    function ($scope, $timeout, localStorageService, FeedService, $q) {\n        $scope.loading = false;\n\n        function key(path) {\n            return window['lang'] + '.' + path;\n        }\n\n        function fullList() {\n            return mapToInt(_.pluck($scope.allFeeds, 'id'));\n        }\n\n        function mapToInt(values) {\n            return values.map(function (value) {\n                return parseInt(value);\n            });\n        }\n\n        function restoreReadableFeeds() {\n            var savedFeeds;\n            var hasSavedFeeds = localStorageService.keys().indexOf(key('feeds')) > -1;\n\n            $feeds = [];\n\n            if (!hasSavedFeeds) {\n                $feeds = fullList();\n            } else {\n                savedFeeds = localStorageService.get(key('feeds'));\n                if (savedFeeds.length) {\n                    $feeds = mapToInt(savedFeeds.split(','));\n                }\n            }\n\n            $scope.savedFeeds = angular.copy($feeds);\n\n            allChecked();\n        }\n\n        function fetchNews() {\n            var defer = $q.defer();\n\n            if ($scope.loading || !$feeds.length) {\n                defer.resolve([]);\n            } else {\n                $scope.loading = true;\n\n                FeedService.news($feeds).then(function (news) {\n                    $scope.loading = false;\n                    $scope.articles = news;\n                    defer.resolve(news);\n                });\n            }\n            return defer.promise;\n        }\n\n        $scope.allChecked = false;\n\n        // all feeds\n        $scope.allFeeds = [];\n\n        // readable feeds\n        var $feeds = [];\n\n        $scope.savedFeeds = [];\n\n        $scope.articles = [];\n\n        function allChecked() {\n            $scope.allChecked = ($feeds.length == $scope.allFeeds.length);\n        }\n\n        $scope.$watch('feeds', function (v1, v2) {\n            if (v1 === v2) return false;\n\n            allChecked();\n        }, true);\n\n        $scope.toggleAll = function ($event) {\n            if ($event.target.checked == true) {\n                $feeds = fullList();\n            } else {\n                $feeds = [];\n            }\n        };\n\n        $scope.init = function (allFeeds) {\n            $scope.allFeeds = allFeeds;\n\n            restoreReadableFeeds();\n\n            fetchNews();\n        };\n\n        $scope.savePreferences = function (cb) {\n            $scope.savedFeeds = mapToInt($feeds);\n\n            localStorageService.set(key('feeds'), $scope.savedFeeds.join(','));\n\n            return fetchNews().then(function () {\n                if (cb) {\n                    cb();\n                }\n            });\n        };\n\n        $scope.cancel = function (cb) {\n            restoreReadableFeeds();\n\n            if (cb) {\n                cb();\n            }\n        };\n\n        $scope.trackUntrack = function (feed_id) {\n            feed_id = parseInt(feed_id);\n\n            if ($scope.trackable(feed_id)) {\n                $feeds = _.without($feeds, feed_id);\n            } else {\n                $feeds.push(feed_id);\n            }\n        };\n\n        $scope.trackable = function (feed_id) {\n            feed_id = parseInt(feed_id);\n\n            return _.indexOf($feeds, feed_id) != -1;\n        }\n    }]);","app.controller('SizerController', ['$scope', '$window', function ($scope, $window) {\n    function getMultiplier() {\n        if ($.browser.msie) {\n            return 0.68;\n        }\n\n        return 0.8;\n    }\n\n    var resize = function() {\n        var k = getMultiplier();\n\n        var viewport = $(window).height();\n        var height = Math.round(viewport * k);\n\n        if (! angular.isMobile) {\n            $scope.size1 = Math.round(height * 0.35);\n            $scope.size2 = Math.round(height * 0.45);\n            $scope.size3 = height - ($scope.size1 + $scope.size2);\n        } else {\n            $scope.size1 = 200;\n            $scope.size2 = 240;\n            $scope.size3 = 150;\n        }\n\n        $scope.resized = true;\n    };\n    setTimeout(resize, 100);\n\n    $(window).on('resize', resize);\n}]);","app.controller('WeatherController', [\n    '$scope', '$timeout', 'WeatherService', 'GeoService', 'localStorageService', '$http',\n    function ($scope, $timeout, WeatherService, GeoService, localStorageService, $http) {\n        var filterChanged = false, savedFilter;\n\n        var defaultFilter = {\n            units: 'si',\n            location: {},\n            address: \"\"\n        };\n\n        $scope.cities = [];\n\n        $scope.filter = angular.copy(defaultFilter);\n\n        $scope.weather = {};\n\n        $scope.loading = false;\n\n        function searchForCity(name) {\n            $http.get(app.API_PREFIX + '/geo/places?name=' + name)\n                .then(function (response) {\n                    var cities = _.uniq(response.data.predictions) || [];\n\n                    $scope.cities = cities;\n                });\n        }\n\n        // skipTracking used when city is predicted by Places API and directly inserted into filter.location\n        // so to prevent double checking, temporary skip this step\n        var skipTracking = false;\n\n        function addressModified(n1, n2) {\n            return n1.address !== n2.address && n1.address.length >= 3;\n        }\n\n        $scope.$watch('filter', function (n1, n2) {\n            if (skipTracking || n1 === n2) return false;\n            filterChanged = true;\n\n            if (addressModified(n1, n2)) {\n                searchForCity(n1.address);\n            }\n\n            // restore tracking:\n            skipTracking = false;\n        }, true);\n\n        function restoreSavedFilter() {\n            delayFilterTracking();\n\n            $scope.filter = angular.copy(defaultFilter);\n        }\n\n        function finish(cb) {\n            if (cb) {\n                cb();\n            }\n        }\n\n        function cacheFilter() {\n            localStorageService.set('w_fltr', JSON.stringify(_.omit($scope.filter, 'address')));\n\n            defaultFilter = angular.copy($scope.filter);\n        }\n\n        function loadCachedFilter() {\n            return JSON.parse(localStorageService.get('w_fltr'));\n        }\n\n        function currentLocation() {\n            return [\n                $scope.filter.location.lat,\n                $scope.filter.location.lng\n            ].join(\",\")\n        }\n\n        // when location or units did change => fetch new weather and set to cache\n        $scope.$on('location.changed', function () {\n            WeatherService.fetch(currentLocation(), {units: $scope.filter.units}).then(function (results) {\n                $scope.weather = angular.extend(results, $scope.filter);\n            });\n        });\n\n        if (!(savedFilter = loadCachedFilter())) {\n            GeoService.geolocate().then(function (GeoService) {\n                $scope.filter.location = {\n                    lat: GeoService.getLatitude(),\n                    lng: GeoService.getLongitude()\n                };\n\n                lookup();\n            });\n        } else {\n            $scope.filter = angular.copy(savedFilter);\n            defaultFilter = angular.copy($scope.filter);\n\n            lookup(savedFilter.location.lat, savedFilter.location.lng);\n        }\n\n        function lookup(lat, lng) {\n            GeoService.lookup(lat || GeoService.getLatitude(), lng || GeoService.getLongitude()).then(function (result) {\n                delayFilterTracking();\n                $scope.filter.address = result.formatted_address;\n\n                cacheFilter();\n\n                $scope.$emit('location.changed');\n            });\n        }\n\n        $scope.cancel = function (callback) {\n            restoreSavedFilter();\n\n            finish(callback);\n        };\n\n        /**\n         * Save module preferences\n         * @returns {boolean}\n         */\n        $scope.savePreferences = function (callback) {\n            if (!filterChanged)\n                return false;\n\n            if ($scope.loading)\n                return false;\n\n            $scope.loading = true;\n\n            if (filterChanged && $scope.filter.address.length) {\n                filterChanged = false;\n                GeoService.geocode($scope.filter.address).then(function (result) {\n                    if (result && result.hasOwnProperty('geometry')) {\n                        delayFilterTracking();\n\n                        $scope.filter = angular.extend($scope.filter, {\n                            // address: result.formatted_address,\n                            location: result.geometry.location\n                        });\n\n                        cacheFilter();\n\n                        $scope.$emit('location.changed');\n\n                        finish(callback);\n                    }\n\n                    $scope.loading = false;\n                });\n            } else {\n                $scope.$emit('location.changed');\n\n                finish(callback);\n            }\n\n            return false;\n        };\n\n        $scope.locationToCity = function (address) {\n            if (!address || !address.indexOf(',')) return '';\n\n            return _.first(\n                address.split(', ')\n            );\n        };\n\n        function delayFilterTracking() {\n            skipTracking = true;\n\n            $timeout(function () {\n                skipTracking = false;\n            }, 100);\n        }\n\n        $scope.selectCity = function (city) {\n            delayFilterTracking();\n\n            $scope.filter.address = city.description;\n\n            $scope.cities = null;\n        };\n\n        $scope.icon = function () {\n            return app.REWRITE_BASE + 'icons/w/' + $scope.weather.currently.icon + '.png';\n        }\n    }]);","app.directive('cardBox', ['$timeout', '$rootScope', function ($timeout, $rootScope) {\n    return {\n        'restrict': \"E\",\n        'scope': {\n            'title': \"@\"\n        },\n        'transclude': {\n            'actions': '?cardBoxActions',\n            'body': 'cardBoxBody'\n        },\n        'link': function (scope, element) {\n            scope.editable = false;\n\n            /**\n             * toggle the actions button if no actions content provided\n             * @type {boolean}\n             */\n            $timeout(function () {\n                scope.hasActions = !!element.find('card-box-actions').text().length;\n            });\n\n            /**\n             * Toggle box's preferences\n             */\n            scope.switchEditableMode = function (callback) {\n                scope.editable = !scope.editable;\n\n                if (callback) {\n                    callback();\n                }\n            };\n\n            function close() {\n                angular.safeApply(scope, function (scope) {\n                    scope.editable = false;\n                });\n            }\n\n            scope.close = close;\n\n            $rootScope.$on('cardbox.close', close);\n        },\n        'templateUrl': app.REWRITE_BASE + 'assets/templates/card-box.html'\n    };\n}]);","app.directive('eventIcon', [function () {\n    return {\n        restrict: \"E\",\n        scope: null,\n        link: function (scope, element, attribs) {\n            var event = JSON.parse(attribs.event);\n            var icon = null;\n\n            if (event.birthday) {\n                icon = 'ti-gift';\n            } else if (! event.allDay) {\n                icon = 'ti-alarm-clock';\n            }\n\n            scope.icon = icon;\n        },\n        template: '<i ng-if=\"icon\" class=\"{{ icon }}\">&nbsp;</i>'\n    };\n}]);","app.factory('EventsService', ['$http', '$httpParamSerializer', function ($http, $httpParamSerializer) {\n    var factory = {};\n\n    factory.events = function (calendar) {\n        var args = $httpParamSerializer({\n            'c': calendar,\n            't': (new Date).getTime(),\n            'tz' : 0//(new Date).getTimezoneOffset()\n        });\n        return $http.get(app.API_PREFIX + '/calendar/events?' + args)\n            .then(function (response) {\n                return response.data.data;\n            });\n    };\n\n    return factory;\n}]);","app.factory('FeedService', ['$http', '$httpParamSerializer', function ($http, $httpParamSerializer) {\n    var factory = {};\n\n    factory.news = function (feeds) {\n        var args = $httpParamSerializer({\n            ids: feeds.join(',')\n        });\n        return $http.get(app.API_PREFIX + '/feed/news?' + args)\n            .then(function (response) {\n                return response.data.data;\n            });\n    };\n\n    return factory;\n}]);","app.factory('GeoService', ['$q', '$http', function ($q, $http) {\n    var factory = {\n        lat: null,\n        lng: null\n    };\n\n    factory.setLocation = function (lat, lng) {\n        factory.lat = parseFloat(lat);\n        factory.lng = parseFloat(lng);\n\n        return factory;\n    };\n\n    factory.getLatitude = function () {\n        return this.lat;\n    };\n\n    factory.getLongitude = function () {\n        return this.lng;\n    };\n\n    function setDefaultLocation() {\n        factory.setLocation(\n            40.7127837,\n            -74.0059413\n        );\n\n        return factory;\n    }\n\n    function fetchLocationUsingIP(defer) {\n        $http.get(app.API_PREFIX + '/geo/ip').then(function (response) {\n            var data = response.data;\n            if (data.cityName.length && '-' != data.cityName) {\n                factory.setLocation(\n                    data.latitude,\n                    data.longitude\n                );\n                defer.resolve(factory);\n            } else {\n                defer.resolve(\n                    setDefaultLocation()\n                );\n            }\n        }).catch(function () {\n            defer.resolve(\n                setDefaultLocation()\n            );\n        });\n    }\n\n    /**\n     * Locate the client by asking Navigator.GeoLocation.\n     */\n    factory.geolocate = function () {\n        var defer = $q.defer();\n\n        // setTimeout(function () {\n        //     return fetchLocationUsingIP(defer);\n        // }, 5000);\n\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(function (position) {\n                factory.setLocation(\n                    position.coords.latitude,\n                    position.coords.longitude\n                );\n\n                defer.resolve(factory);\n            }, function () {\n                return fetchLocationUsingIP(defer);\n            });\n        } else {\n            // set default location to new york\n            defer.resolve(\n                setDefaultLocation()\n            );\n        }\n\n        return defer.promise;\n    };\n\n    factory.geocode = function (location) {\n        return $http.get(app.API_PREFIX + '/geo/code?loc=' + location)\n            .then(function (response) {\n                return response.data.results[0];\n            });\n    };\n\n    factory.lookup = function (lat, lng) {\n        return $http.get(app.API_PREFIX + '/geo/lookup?latlng=' + [lat, lng].join(','))\n            .then(function (response) {\n                return response.data.results[0];\n            });\n    };\n\n    return factory;\n}]);","app.factory('GmailService', ['$http', '$httpParamSerializer', function ($http, $httpParamSerializer) {\n    var factory = {};\n\n    /**\n     * Fetch the messages list that match criteria.\n     *\n     * @param args\n     * @returns {*}\n     */\n    factory.fetchMessages = function (args) {\n        return $http.get(app.API_PREFIX + '/gmail/messages?' + $httpParamSerializer(args))\n            .then(function (response) {\n                return response.data;\n            });\n    };\n\n    /**\n     * Fetch the message.\n     *\n     * @param messageId\n     * @returns {*}\n     */\n    factory.get = function (messageId) {\n        return $http.get(app.API_PREFIX + '/gmail/messages/' + messageId + '?include=body')\n            .then(function (response) {\n                return response.data;\n            });\n    };\n\n    /**\n     * Mark message as Read.\n     *\n     * @param messageId\n     * @returns {*}\n     */\n    factory.markAsRead = function (messageId) {\n        return $http.get(app.API_PREFIX + '/gmail/messages/' + messageId + '/touch');\n    };\n\n    return factory;\n}]);","app.factory(\"WeatherService\", ['$http', '$httpParamSerializer', function ($http, $httpParamSerializer) {\n    var factory = {};\n\n    factory.fetch = function (coords, params) {\n        var $args = angular.extend({\n            coords: coords,\n            units: 'si'\n        }, params || {});\n\n        var $url = app.API_PREFIX + '/weather/get?' + $httpParamSerializer($args);\n        return $http\n            .get($url)\n            .then(function (response) {\n                return response.data;\n            });\n    };\n\n    return factory;\n}]);"],"sourceRoot":"/source/"}