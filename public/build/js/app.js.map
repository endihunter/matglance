{"version":3,"sources":["helpers.js","app.js","CalendarController.js","GmailController.js","QuoteController.js","RssController.js","WeatherController.js","CardBox.js","Skycon.js","GeoService.js","GmailService.js","WeatherService.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACntHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACnjLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AChxCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"app.js","sourcesContent":["/**\n * @param {Scope} scope\n * @param {Function} callback\n */\nangular.safeApply = function (scope, callback) {\n    scope[(scope.$$phase || scope.$root.$$phase) ? '$eval' : '$apply'](callback || function() {});\n};\n\nangular.isMobile = (function(a)\n{\n    return /((iP([oa]+d|(hone)))|Android|WebOS|BlackBerry|windows (ce|phone))/i.test(a);\n})(navigator.userAgent||navigator.vendor||window.opera);\n\nangular.isOnline = function isOnline()\n{\n    var isOnline = (window.navigator && window.navigator.onLine);\n    console.log(\"Online\", isOnline);\n\n    return isOnline;\n};","var app = angular.module('app', ['ngSanitize', 'LocalStorageModule']);\n\napp.config(['localStorageServiceProvider', function (localStorageServiceProvider) {\n    localStorageServiceProvider.setPrefix('ymag_');\n    localStorageServiceProvider.setStorageCookie(1, '/');\n}]);\n\napp.run(['$rootScope', function ($rootScope) {\n    \n}]);\n\napp.API_PREFIX = '/api/v1';\n","app.controller('CalendarController', ['$scope', function ($scope) {\n    \n}]);","app.controller('GmailController', ['$scope', 'GmailService', '$sce', function ($scope, GmailService, $sce) {\n    $scope.searchMode = false;\n\n    $scope.message = null;\n\n    $scope.loading = false;\n\n    $scope.filter = {\n        'from': '',\n        'to': '',\n        'subject': '',\n        'includeSpamTrash': false\n    };\n\n    $scope.messages = [];\n\n    $scope.query = '';\n\n    function buildQuery() {\n        $scope.query = '';\n\n        var q = [];\n        angular.forEach(['from', 'to', 'subject'], function (field, index, values) {\n            var value = $scope.filter[field];\n\n            if (value.length) {\n                q.push(field + ': (' + value + ')');\n            }\n        });\n\n        $scope.query = q.join(\" \").trim();\n\n        return $scope.query;\n    }\n\n\n    $scope.fetchMessages = function () {\n        $scope.loading = true;\n\n        var args = {\n            'includeSpamTrash': !!$scope.filter.includeSpamTrash,\n            'q': buildQuery()\n        };\n\n        GmailService.fetchMessages(args)\n            .then(function (messages) {\n                // restore listing view\n                $scope.message = null;\n\n                angular.safeApply($scope, function ($scope) {\n                    $scope.messages = messages;\n\n                    $scope.loading = false;\n                });\n            })\n            .catch(function () {\n                console.error(arguments);\n                $scope.loading = false;\n            });\n    };\n\n    // fetch messages on page ready\n    $scope.fetchMessages();\n\n    $scope.isUnRead = function (message) {\n        return message.hasOwnProperty('labels')\n            && (-1 < message.labels.indexOf('UNREAD'));\n    };\n\n    $scope.fullMessageUrl = function (messageId) {\n        return $sce.trustAsResourceUrl('/gmail/messages/' + messageId + '/body');\n    };\n\n    $scope.toggleSearchMode = function () {\n        $scope.searchMode = !$scope.searchMode;\n\n        if (!$scope.searchMode) {\n            $scope.switchEditableMode();\n        }\n    };\n\n    $scope.backToList = function () {\n        $scope.message = null;\n    };\n\n    $scope.readMessage = function (messageId) {\n        $scope.loading = true;\n\n        GmailService.get(messageId)\n            .then(function (message) {\n                angular.safeApply($scope, function ($scope) {\n                    $scope.message = message;\n\n                    $scope.loading = false;\n\n                    var currentMessage = $scope.messages.filter(function (message) {\n                        return message.id == messageId;\n                    })[0];\n\n                    $scope.messages.map(function (message) {\n                        if (message.id == messageId && $scope.isUnRead(message)) {\n                            var index = message.labels.indexOf('UNREAD');\n\n                            message.labels.splice(index, 1);\n\n                            GmailService.markAsRead(messageId);\n                        }\n\n                        return message;\n                    });\n                });\n            })\n            .catch(function () {\n                console.log(arguments);\n\n                $scope.loading = false;\n            });\n    }\n}]);","app.controller('QuoteController', ['$scope', '$http', function ($scope, $http) {\n    $scope.quote = {\n        id: null,\n        quote: '',\n        author: ''\n    };\n\n    $scope.loading = false;\n\n    /**\n     * Fetch random quote\n     */\n    $scope.fetchRandom = function () {\n        $scope.loading = true;\n        $http.get(app.API_PREFIX + '/quotes/random').then(function (response) {\n            $scope.quote = response.data;\n            $scope.loading = false;\n        });\n    }\n}]);","app.controller('RssController', ['$scope', '$timeout', function ($scope, $timeout) {\n    $scope.savePreferences = function () {\n        console.log('saving rss prefs', $scope.data);\n\n        return false;\n    };\n}]);","app.controller('WeatherController', [\n    '$scope', '$timeout', 'WeatherService', 'GeoService', 'localStorageService', '$http',\n    function ($scope, $timeout, WeatherService, GeoService, localStorageService, $http) {\n        var filterChanged = false, weather, location;\n\n        $scope.cities = [];\n\n        $scope.filter = {\n            units: 'si',\n            location: \"\"\n        };\n\n        $scope.weather = {};\n\n        $scope.loading = false;\n\n        function searchForCity(name) {\n            $http.get(app.API_PREFIX + '/geo/places/?name=' + name)\n                .then(function (response) {\n                    var cities = _.uniq(response.data.predictions) || [];\n\n                    $scope.cities = cities;\n                });\n        }\n\n        // skipTracking used when city is predicted by Places API and directly inserted into filter.location\n        // so to prevent double checking, temporary skip this step\n        var skipTracking = false;\n\n        function addressModified(n1, n2) {\n            return n1.location !== n2.location && n1.location.length >= 3;\n        }\n\n        $scope.$watch('filter', function (n1, n2) {\n            if (skipTracking || n1 === n2) return false;\n            filterChanged = true;\n\n            if (addressModified(n1, n2)) {\n                searchForCity(n1.location);\n            }\n\n            // restore tracking:\n            skipTracking = false;\n        }, true);\n\n        function restoreSavedFilter() {\n            delayFilterTracking();\n\n            $scope.filter = {\n                units: $scope.weather.units,\n                location: $scope.weather.location\n            }\n        }\n\n        // fetch last weather data from cache\n        if (weather = localStorageService.get('weather')) {\n            $scope.weather = JSON.parse(weather);\n\n            // restore filter from cache\n            restoreSavedFilter();\n        }\n\n        function currentLocation() {\n            return [\n                GeoService.getLatitude(),\n                GeoService.getLongitude()\n            ].join(\",\")\n        }\n\n        // when location or units did change => fetch new weather and set to cache\n        $scope.$on('location.changed', function () {\n            WeatherService.get(currentLocation(), {units: $scope.filter.units}).then(function (results) {\n                $scope.weather = angular.extend(results, $scope.filter);\n                localStorageService.set('weather', JSON.stringify(results));\n            });\n        });\n\n        if (!(location = localStorageService.get('location'))) {\n            GeoService.geolocate().then(function (GeoService) {\n                var location = {\n                    lat: GeoService.getLatitude(),\n                    lng: GeoService.getLongitude()\n                };\n\n                console.log(location);\n\n                GeoService.lookup(location.lat, location.lng).then(function (result) {\n                    var address = result.formatted_address;\n\n                    localStorageService.set('location', JSON.stringify({\n                        address: address,\n                        location: location\n                    }));\n\n                    $scope.filter.location = address;\n\n                    $scope.$emit('location.changed');\n                });\n            });\n        } else {\n            var location = JSON.parse(location);\n            var coords = location.location;\n            $scope.filter.location = location.address;\n\n            GeoService.setLocation(coords.lat, coords.lng);\n            $scope.$emit('location.changed');\n        }\n\n        $scope.cancel = function (callback) {\n            restoreSavedFilter();\n\n            if (callback) {\n                callback();\n            }\n        };\n\n        /**\n         * Save module preferences\n         * @returns {boolean}\n         */\n        $scope.savePreferences = function () {\n            if (!filterChanged) return false;\n\n            $scope.loading = true;\n\n            if (filterChanged && $scope.filter.location.length) {\n                filterChanged = false;\n                GeoService.geocode($scope.filter.location).then(function (result) {\n                    if (result && result.hasOwnProperty('geometry')) {\n                        var address = $scope.filter.location = result.formatted_address;\n                        var location = result.geometry.location;\n\n                        GeoService.setLocation(location.lat, location.lng);\n\n                        $scope.$emit('location.changed');\n\n                        localStorageService.set('location', JSON.stringify({\n                            address: address,\n                            location: {\n                                lat: location.lat,\n                                lng: location.lng\n                            }\n                        }));\n                    }\n\n                    $scope.loading = false;\n                });\n            } else {\n                $scope.$emit('location.changed');\n            }\n\n            return false;\n        };\n\n        $scope.locationToCity = function (location) {\n            if (!location || !location.indexOf(',')) return '';\n\n            return _.first(\n                location.split(', ')\n            );\n        };\n\n        function delayFilterTracking() {\n            skipTracking = true;\n\n            $timeout(function () {\n                skipTracking = false;\n            }, 100);\n        }\n\n        $scope.selectCity = function (city) {\n            delayFilterTracking();\n\n            $scope.filter.location = city.description;\n\n            $scope.cities = null;\n        }\n    }]);","app.directive('cardBox', ['$timeout', '$rootScope', function ($timeout, $rootScope) {\n    return {\n        'restrict': \"E\",\n        'scope': {\n            'title': \"@\"\n        },\n        'transclude': {\n            'actions': '?cardBoxActions',\n            'body': 'cardBoxBody'\n        },\n        'link': function (scope, element) {\n            scope.editable = false;\n\n            /**\n             * toggle the actions button if no actions content provided\n             * @type {boolean}\n             */\n            $timeout(function () {\n                scope.hasActions = !!element.find('card-box-actions').text().length;\n            });\n\n            /**\n             * Toggle box's preferences\n             */\n            scope.switchEditableMode = function (callback) {\n                scope.editable = !scope.editable;\n\n                if (callback) {}\n            };\n        },\n        'templateUrl': '/assets/templates/card-box.html'\n    };\n}]);","app.directive('skycon', function () {\n    return {\n        restrict: \"E\",\n        replace: true,\n        scope: {\n            icon: \"@\"\n        },\n        link: function (scope, element, attribs) {\n            scope.size = attribs.size || 128;\n\n            var initIcon = function () {\n                var skycons = new Skycons({'color': 'grey'});\n\n                // you can add a canvas by it's ID...\n                var draw = attribs.icon.split('-').join('_').toUpperCase();\n                skycons.add(document.getElementById('skycon'), Skycons[draw]);\n\n                // start animation!\n                skycons.play();\n            };\n            initIcon();\n\n            attribs.$observe('icon', initIcon);\n        },\n        template: '<canvas id=\"skycon\"></canvas>'\n    };\n});","app.factory('GeoService', ['$q', '$http', function ($q, $http) {\n    var factory = {\n        lat: null,\n        lng: null\n    };\n\n    factory.setLocation = function (lat, lng) {\n        factory.lat = parseFloat(lat);\n        factory.lng = parseFloat(lng);\n\n        return factory;\n    };\n\n    factory.getLatitude = function () {\n        return this.lat;\n    };\n\n    factory.getLongitude = function () {\n        return this.lng;\n    };\n\n    function setDefaultLocation() {\n        factory.setLocation(\n            40.7127837,\n            -74.0059413\n        );\n\n        return factory;\n    }\n\n    /**\n     * Locate the client by asking Navigator.GeoLocation.\n     */\n    factory.geolocate = function () {\n        var defer = $q.defer();\n\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(function (position) {\n                factory.setLocation(\n                    position.coords.latitude,\n                    position.coords.longitude\n                );\n\n                defer.resolve(factory);\n            }, function (blocked) {\n                defer.resolve(\n                    setDefaultLocation()\n                );\n            });\n        } else {\n            // set default location to new york\n            defer.resolve(\n                setDefaultLocation()\n            );\n        }\n\n        return defer.promise;\n    };\n\n    factory.geocode = function (location) {\n        return $http.get(app.API_PREFIX + '/geo/code?loc=' + location)\n            .then(function (response) {\n                return response.data.results[0];\n            });\n    };\n\n    factory.lookup = function (lat, lng) {\n        return $http.get(app.API_PREFIX + '/geo/lookup?latlng=' + [lat, lng].join(','))\n            .then(function (response) {\n                return response.data.results[0];\n            });\n    };\n\n    return factory;\n}]);","app.factory('GmailService', ['$http', '$httpParamSerializer', function ($http, $httpParamSerializer) {\n    var factory = {};\n\n    /**\n     * Fetch the messages list that match criteria.\n     *\n     * @param args\n     * @returns {*}\n     */\n    factory.fetchMessages = function (args) {\n        return $http.get(app.API_PREFIX + '/gmail/messages?' + $httpParamSerializer(args))\n            .then(function (response) {\n                return response.data.data;\n            });\n    };\n\n    /**\n     * Fetch the message.\n     *\n     * @param messageId\n     * @returns {*}\n     */\n    factory.get = function (messageId) {\n        return $http.get(app.API_PREFIX + '/gmail/messages/' + messageId + '?include=body')\n            .then(function (response) {\n                return response.data;\n            });\n    };\n\n    /**\n     * Mark message as Read.\n     *\n     * @param messageId\n     * @returns {*}\n     */\n    factory.markAsRead = function (messageId) {\n        return $http.get(app.API_PREFIX + '/gmail/messages/' + messageId + '/touch');\n    };\n\n    return factory;\n}]);","app.factory(\"WeatherService\", ['$http', '$httpParamSerializer',\n    function ($http, $httpParamSerializer) {\n        var factory = {};\n\n        factory.get = function (coords, params) {\n            var args = angular.extend({\n                coords: coords,\n                units: 'si'\n            }, params || {});\n\n            return $http\n                .get(app.API_PREFIX + '/weather/get/?' + $httpParamSerializer(args))\n                .then(function (response) {\n                    return response.data;\n                });\n        };\n\n        return factory;\n    }]);"],"sourceRoot":"/source/"}